/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.73
 * Generated at: 2022-05-26 05:56:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class output_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

        //(1) <input type=text ... name값이 넘어온다는
        //    가방 구두 넥타이, select-option 에서는 value값 중요
        
        //(2) session에서 처리하여 장바구니와 연관
        //    input에서는 session 생성 못함(front-end)
        //    back-end인 jsp 여기서 세션을 생성하여 처리
        //    But, 일단 넘어온 내용을 세션에서 꺼내야 장바구니에 넣는데
        //    
        
        //(1)
        String itemValue = request.getParameter("product"); //select 이름
        String cntValue = request.getParameter("cnt"); //수량
                   //5개
        
                   
        //ArrayList도 가능하다
        //세션 속성명의 값을 읽어서 종류가 3개니까 세션도 3가지
        Object obj1 = session.getAttribute("cnts1"); //가방개수
        Object obj2 = session.getAttribute("cnts2"); //구두개수
        Object obj3 = session.getAttribute("cnts3"); //넥타이개수
        
        //처음인가 아니면 구두에 대한 전 것의 갯수가 들어있는가?
        //처음이 아니면 갯수 계산 준비를 시작
        
        int cnt1 = 0, cnt2 = 0, cnt3 = 0, cnt = 0;
        if(obj1 != null) {
                //처음이면(session 없으면 obj1은 null) 아무것도 안함 (다음으로 감)
                cnt1 = (Integer)obj1; //값이 있으면 cnt에 넣음
        }
        
        if(obj2 != null) {
                cnt2 = (Integer)obj2;
        }
        
        if(obj3 != null) {
                cnt3 = (Integer)obj3;
        }
        
        //bag이 5개라면
        cnt = Integer.parseInt(cntValue); //넘어온 수량을 int로
        
        
        
        //어떤 상품인지를 파악
        if("bag".equals(itemValue)) {
                cnt1 += cnt; //세션 속성값을 위해 누적 cnt1에는 3이 누적됨
        }
        if("shoes".equals(itemValue)) {
                cnt2 += cnt;
        }
        if("tie".equals(itemValue)) {
                cnt3 += cnt; //넥타이 10개 선택시 여기에 10개 들어감
        }
        
        //여기서 세션에 제대로 된 속성값 저장
        session.setAttribute("cnts1", cnt1); // 가방 5개, bag
        session.setAttribute("cnts2", cnt2); // 없어 초기치 0, shoes
        session.setAttribute("cnts3", cnt3); // 없어 0, tie
        
        // session.invalidate() 세션삭제 (로그인이 세션으로 진행될 때 로그아웃인 경우 참조)
        // session.removeAttribute("cnts2"); cnts2 속성명 삭제
        
        //Q) 그렇다면 why? 세션 만들고 get 하지않고
        //get 먼저하고 session을 만들었을까?
                        //그 다음 처리를 위해서

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <h2>현재 장바구니 내역</h2>\r\n");
      out.write("        <hr>\r\n");
      out.write("        \r\n");
      out.write("        ");
if(cnt1 != 0) { 
      out.write("가방: ");
      out.print(cnt1 );
      out.write(' ');
} 
      out.write(" <br>\r\n");
      out.write("        ");
if(cnt2 != 0) { 
      out.write("구두: ");
      out.print(cnt2 );
      out.write(' ');
} 
      out.write(" <br>\r\n");
      out.write("        ");
if(cnt3 != 0) { 
      out.write("넥타이: ");
      out.print(cnt3 );
      out.write(' ');
} 
      out.write(" <br><br>\r\n");
      out.write("        \r\n");
      out.write("        <a href=\"input.jsp\">계속 산다</a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
