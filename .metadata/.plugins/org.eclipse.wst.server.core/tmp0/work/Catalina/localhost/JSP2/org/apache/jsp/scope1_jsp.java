/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.73
 * Generated at: 2022-05-26 01:36:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class scope1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- jsp 내장객체 9개\r\n");
      out.write("out, request, response......\r\n");
      out.write(" <!-- 장바구니 (shopping carter)\r\n");
      out.write("         아마존고 시애틀\r\n");
      out.write("         진열대에서 물건을 집으면 산것으로 간주\r\n");
      out.write("         \r\n");
      out.write("         노트북 => 장바구니, 청바지 매장으로 들어가서 search 후\r\n");
      out.write("         다시 노트북으로 왔더니\r\n");
      out.write("         페이지를 옮기다 보니 장바구니 노트북이 없어짐\r\n");
      out.write("         \r\n");
      out.write("         범위(scope) \r\n");
      out.write("         ==> 이 경우는 사용자가 수많은 웹페이지가 왔다 갔다 하게 됨\r\n");
      out.write("         ==> 쳥바지는 웹페이지를 아무리 옮겨다녀도 그대로 존재\r\n");
      out.write("         그러므로 특별한 형태가 유지되어야 한다\r\n");
      out.write("         \r\n");
      out.write("         예) 다른 페이지로 넘어가면 전페이지를 모른다\r\n");
      out.write("         한 페이지는 ok인데 두 페이지로 가므로 모른다.\r\n");
      out.write("         즉, 계속 유지되어야 한다\r\n");
      out.write("         \r\n");
      out.write("         \r\n");
      out.write("         그래서 이것을 범위로 얘기해보자\r\n");
      out.write("         scope(범위)\r\n");
      out.write("         pageContext < request < session < application\r\n");
      out.write("                                                         (feat. 웹소켓에서 session interface)\r\n");
      out.write("                                                         \r\n");
      out.write("         pageContext: 한 페이지에서만 알아들음                                                \r\n");
      out.write("         request: aa.jsp => bb.jsp (요청에서 응답까지만, 서블릿의 forward)\r\n");
      out.write("         session: 1 browser 1 session 형식\r\n");
      out.write("         application 1 was 1 application\r\n");
      out.write("         -->\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("\r\n");

//여기는 scriptlet
//범위에서 해당 값 인식을 위해
// scope.저장메소드("속성명","속성값") //setter, getter
pageContext.setAttribute("page1", "pagelove"); //페이지범위
request.setAttribute("req1", "reqlove"); //요청범위
session.setAttribute("ses1", "seslove"); //브라우저살아있는 동안 //1browser-1 session
application.setAttribute("app1", "applove");  //WAS가 계속 가동되는 동안


      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<a href=\"./scope2.jsp\">scope2.jsp로 한번 가볼까!!!!!</a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
