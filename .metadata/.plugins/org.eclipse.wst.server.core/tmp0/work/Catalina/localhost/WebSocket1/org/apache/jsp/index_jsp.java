/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.73
 * Generated at: 2022-05-17 01:33:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>채팅채팅 </title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!--index.html 도 하ㅏㄴ 더 생성  .. 하나는 서버, 하나는 클라이언트라고 생각하면 됨. -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<h3> 채팅 </h3>\r\n");
      out.write("\r\n");
      out.write("<textarea rows=\"10\" cols=\"50\" readonly id=\"ta1\"></textarea> <br>\r\n");
      out.write("\r\n");
      out.write("<h3>닉네임</h3>\r\n");
      out.write("<input type=\"text\" id=\"who1\" value=\"홍길동\">\r\n");
      out.write("\r\n");
      out.write("<h3>보낼 글 </h3>\r\n");
      out.write("<input type=\"text\" id=\"chat1\" onkeyup=\"enterkey()\">\r\n");
      out.write("<!-- onkeyup : down이 누르는거고 on 은 눌렀다 뗐을 때  -->\r\n");
      out.write("<input type=\"submit\" value=\"가자\" onclick=\"kajaChool();\">\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function enterkey(){\r\n");
      out.write("	if(window.event.keyCode == 13){ // ascii code 에서 엔터키 13 \r\n");
      out.write("		kajaChool();\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function kajaChool(){               // 비활성화 \r\n");
      out.write("	document.getElementById(\"who1\").disabled=true; // 이름 한번 정하면 변경 불가 \r\n");
      out.write("	\r\n");
      out.write("	ta1.value += \"[\" + who1.value + \"] \" + chat1.value + \"\\n\";\r\n");
      out.write("	// [홍길동] 이먼저 출력되고 그 다음 입력한 채팅 내용 출력 \r\n");
      out.write("	\r\n");
      out.write("	ws1.send(\"[\" + who1.value +\"] \" + chat1.value );\r\n");
      out.write("	//그리고 상대방에게도 [홍길동] 및 채팅내용이 출력되게 함 \r\n");
      out.write("	\r\n");
      out.write("	chat1.value = \"\";\r\n");
      out.write("	chat1.focus();\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("// ws(웹 소켓) 은 시작을 http 로 했다가 websocket 으로 바뀜.\r\n");
      out.write("//  -> 서버에서도 websocket에 접근이 가능.. 따라서 상호요청이 가능한 것. \r\n");
      out.write("var ws1 = new WebSocket(\"ws://localhost:8080\" + \"");
      out.print(request.getContextPath());
      out.write("/kaja\");\r\n");
      out.write("// request 가 가지고 있는 메소드 중 하나 .getContextPath() : 프로젝트 경로를 찾아감. \r\n");
      out.write("// 프로젝트경로/kaja 로 가는 것. \r\n");
      out.write("// .java 에도 @ServerEndpoint(\"/kaja\") 로 되어 있음. \r\n");
      out.write("\r\n");
      out.write("// index.jsp 를 실행하면 url 주소창에는 index.jsp 로 끝나겠지만 실제 찾아가는 곳은 /kaja 라는 것. \r\n");
      out.write("\r\n");
      out.write("var chat1 = document.getElementById('chat1');\r\n");
      out.write("var ta1 = document.getElementById('ta1');\r\n");
      out.write("\r\n");
      out.write("ws1.onerror = function(aa){\r\n");
      out.write("	alert('error');\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("ws1.onopen = function(aa){\r\n");
      out.write("	alert(\"[채팅 시작하세요 ]\")\r\n");
      out.write("	who1.focus();\r\n");
      out.write("	who1.select();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("ws1.onmessage = function(aa){\r\n");
      out.write("	\r\n");
      out.write("	ta1.value += aa.data + \"\\n\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
